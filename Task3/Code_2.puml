@startuml Animal Monitoring System - Class Diagram
skinparam dpi 150

!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml
!includeurl https://raw.githubusercontent.com/RicardoNiepel/C4-PlantUML/master/C4_Component.puml

title Система мониторинга животных - Диаграмма классов

top to bottom direction

' user
package "user" {
    class UserRoleEnum <<enumeration>> {
        +String role1
        +String role2
        +String role3
        +String role4
    }

    class UserModel {
        +String name
        +String email
        +UserRoleEnum user_role
    }

    class UserRepository {
        +list_users(): List<User>
        +get_user(): User
        +create_user(): User
        +update_user(): User
        +delete_user(): void
    }

    class Dictionary {
        +String refresh
        +String access
    }

    class LoginResponse {
        +Dictionary token_data
        +User user_data
    }

    class UserServices {
        +list_users(): List<User>
        +get_user(): User
        +create_user(): User
        +update_user(): User
        +delete_user(): void
    }

    class AuthServices {
        +_check_user_password_is_valid(): boolean
        +_hash_user_password(): bytes
        +_generate_access_and_refresh_token(): Dictionary
    }

    class UserController {
        +list_users(): List<User>
        +get_user(): User
        +create_user(): User
        +update_user(): User
        +delete_user(): void
    }
    class AuthController {
        +LoginResponse login()
        +String issue_access_token()
    }

    UserModel "1" -- "1" UserRoleEnum : includes >
    AuthServices "1" -- "1" Dictionary : includes >
    UserRepository ..> UserModel : uses >
    UserServices ..> UserRepository : uses >
    AuthController ..> UserServices : uses >
    AuthController ..> AuthServices : uses >

    UserController ..> UserServices : uses >
    UserController ..> AuthServices : uses >
    AuthController "1" -- "0..*" LoginResponse : manages >
}


' analytics
package "analytics" {
    class ResponseType <<enumeration>> {
        +string success
        +string failed
    }

    class Error {
        +int error_code
        +string error_text
    }

    class Response {
        +int response_id
        +ResponseType response
        +error: Error?
    }

    class Metrics {}
    class MetricsRepository {
        +get_metrics(): Metrics
        +add_metrics(): void
        +delete_metrics(): void
    }
    class MetricsServices {
        +get_metrics(): Metrics
        +add_metrics(): void
        +delete_metrics(): void
    }
    class MetricsController {
        +get_metrics(): Metrics
        +add_metrics(): Response
        +delete_metrics(): Response
    }


    class KafkaMonitoringDataConsumer {
        consume_monitoring_data(): MonitoringData
    }

    class MonitoringData {}
    class MonitoringDataRepository{
        +get_monitoring_data(): List<MonitoringData>
        +save_monitoring_data(): void
        +delete_monitoring_data(start_date: Date, end_date: Date): void
    }
    class MonitoringDataServices{
        +get_monitoring_data(): List<MonitoringData>
        +save_monitoring_data(): void
        +delete_monitoring_data(start_date: Date, end_date: Date): void
    }

    class FunctionType {
        +execute(): string
    }
    class CeleryTasksConnector {
        -FunctionType _celery_task()
    }


    class Analytics {}
    class AnalyticsServices {
        +generate_analytics(): Analytics
        +save_analytics(): void
        +clean_analytics(): void
        -_call_celery_task(): void
    }
    class AnalyticsController {
        +request_analytics(): Response
        +get_analytics(): ResponseType | Analytics
    }

    Response "1" -- "1" ResponseType : includes >
    Response "1" -- "1" Error : includes >

    MonitoringDataRepository "1" -- "0..*" MonitoringData : manages >
    MonitoringDataServices ..> MonitoringDataRepository : uses >
    KafkaMonitoringDataConsumer ..> MonitoringDataServices : uses >

    MetricsRepository "1" -- "0..*" Metrics : manages >
    MetricsServices ..> MetricsRepository : uses >
    MetricsController ..> MetricsServices : uses >

    AnalyticsServices ..> AnalyticsRepository : uses >
    AnalyticsServices ..> MetricsRepository : uses >
    AnalyticsServices ..> CeleryTasksConnector : uses >
    AnalyticsController ..> AnalyticsServices : uses >
    AnalyticsController ..> MonitoringDataServices : uses >

    CeleryTasksConnector "1" -- "1" FunctionType: includes >
    AnalyticsController "1" -- "0..*" Response : manages >
    AnalyticsRepository "1" -- "0..*" Analytics : manages >
}


' central_server_application
package "central_server_application" {
    class Authorisation {
        login_controller(): UserModel
        registration_controller(): UserModel
    }

    class AuthMiddleware {
        verify_jwt_access_token(): Response
    }


    class MetricsControllers {
        get_metrics_controller(): Metrics
        add_metrics_controller(): void
        delete_metrics_controller():void
        get_metrics_data_controller(): Analytics
    }

    class ExternalSystemsController {
        get_metrics_controller(): Metrics
    }
    class MetricsServices {
        get_metrics_controller(): Metrics
        add_metrics_controller(): void
        delete_metrics_controller():void
        get_metrics_data_controller(): Analytics
    }


    class EventTypeEnum <<enumeration>> {
        +string warn
        +string notivication
        +string event
    }
    class ProducerTypeEnum <<enumeration>> {
        +string resources_monitoring
        +string equipment_control
        +string animals_behaviour_monitoring
    }

    class Event {
        +string time
        +EventTypeEnum event_type
        +ProducerTypeEnum producer_type
    }
    class ResourcesControlConsumer {
        consume(): Event
    }
    class EquipmentControlConsumer {
        consume(): Event
    }
    class AnimalsBehaviourMonitoringConsumer {
        consume(): Event
    }

    class ResourcesMonitoringServices {
        notify_ws():void
    }
    class EquipmentControlServices {
        notify_ws():void
    }
    class AnimalsBehaviourMonitoringServices {
        notify_ws():void
    }

    class WebsocketsUiConnector {
        notify_ui(): void
        notify_mobile_app(): void
    }

    class Command{}
    class EquipmentControlConnectorMainServer {
        send_command(command: Command): Response
    }
    class EquipmentControlController {
        send_command(command: Command): Response
    }

    Event "1" -- "1" EventTypeEnum: includes >
    Event "1" -- "1" ProducerTypeEnum: includes >

    ResourcesControlConsumer ..> ResourcesMonitoringServices : uses >
    ResourcesControlConsumer "1" -- "0..*" Event : manages >

    EquipmentControlConsumer ..> EquipmentControlServices : uses >
    EquipmentControlConsumer "1" -- "0..*" Event : manages >
    EquipmentControlConnectorMainServer "1" -- "0..*" Command : manages >

    AnimalsBehaviourMonitoringConsumer ..> AnimalsBehaviourMonitoringServices : uses >
    AnimalsBehaviourMonitoringConsumer "1" -- "0..*" Event : manages >

    ResourcesMonitoringServices ..> WebsocketsUiConnector : uses >
    EquipmentControlServices ..> WebsocketsUiConnector : uses >
    AnimalsBehaviourMonitoringServices ..> WebsocketsUiConnector : uses >

    AuthMiddleware ..> MetricsControllers : uses >
    AuthMiddleware ..> ExternalSystemsController : uses >
    MetricsControllers ..> MetricsServices : uses >
    ExternalSystemsController ..> MetricsServices : uses >

    AuthMiddleware ..> EquipmentControlController : uses >
    EquipmentControlController ..> EquipmentControlConnectorMainServer : uses >
    AuthMiddleware -- WebsocketsUiConnector : related
}

package "resources_monitoring_server" {
    class FoorageMonitoringData {}
    class FoorageMonitoringController {
        -ResourcesMonitoringPublisher _publisher

        +recieve_monitoring_data(): void
        +publish_data(): void
        +warn_operator(): Event
    }

    class WaterFiltersMonitoringData {}
    class WaterFiltersController {
        -ResourcesMonitoringPublisher _publisher

        +recieve_monitoring_data(): void
        +publish_data(): void
        +warn_operator(): Event
    }

    class ResourcesMonitoringPublisher {
        +publish_event(): Event
    }

    FoorageMonitoringController "1" -- "0..*" FoorageMonitoringData : manages >
    FoorageMonitoringController ..> ResourcesMonitoringPublisher : uses >

    WaterFiltersController "1" -- "0..*" WaterFiltersMonitoringData : manages >
    WaterFiltersController ..> ResourcesMonitoringPublisher : uses >
}

package "equipment_control_server" {
    class FeedersControlMonitoringData {}
    class FeedersControlMonitoringController {
        -EquipmentControlPublisher _publisher

        +recieve_central_server_command(command:Command): Response
        -_send_command_to_equipment(command:Command): Response
        +recieve_monitoring_data(): void
        +publish_data(): void
        +warn_operator(): Event
    }

    class WaterBowlsControlMonitoringData {}
    class WaterBowlsControlController {
        -EquipmentControlPublisher _publisher

        +recieve_central_server_command(command:Command): Response
        -_send_command_to_equipment(command:Command): Response
        +recieve_monitoring_data(): void
        +publish_data(): void
        +warn_operator(): Event
    }

    class EquipmentControlPublisher {
        +publish_event(): Event
    }

    FeedersControlMonitoringController "1" -- "0..*" FeedersControlMonitoringData : manages >
    FeedersControlMonitoringController ..> EquipmentControlPublisher : uses >

    WaterBowlsControlController "1" -- "0..*" WaterBowlsControlMonitoringData : manages >
    WaterBowlsControlController ..> EquipmentControlPublisher : uses >
}



package "animals_behaviour_monitoring" {
    class AnimalsDeviantBehaviourControlMonitoringData {}
    class AnimalsDeviantBehaviourControlController {
        -AnimalsBehaviourMonitoringPublisher _publisher

        +recieve_monitoring_data(): void
        +publish_data(): void
        +warn_operator(): Event
    }

    class SignsOfPigletsBeingCrushedDetectionMonitoringData {}
    class SignsOfPigletsBeingCrushedDetectionController {
        -AnimalsBehaviourMonitoringPublisher _publisher

        +recieve_monitoring_data(): void
        +publish_data(): void
        +warn_operator(): Event
    }


    class AnimalExteriorAuditMonitoringData {}
    class AnimalExteriorAuditController {
        -AnimalsBehaviourMonitoringPublisher _publisher

        +recieve_monitoring_data(): void
        +publish_data(): void
        +warn_operator(): Event
    }


    class CountAnimalsSystemMonitoringData {}
    class CountAnimalsSystemController {
        -AnimalsBehaviourMonitoringPublisher _publisher

        +recieve_monitoring_data(): void
        +publish_data(): void
        +warn_operator(): Event
    }


    class AnimalsBehaviourMonitoringPublisher {
        +publish_event(): Event
    }

    AnimalsDeviantBehaviourControlController "1" -- "0..*" AnimalsDeviantBehaviourControlMonitoringData : manages >
    AnimalsDeviantBehaviourControlController ..> AnimalsBehaviourMonitoringPublisher : uses >

    SignsOfPigletsBeingCrushedDetectionController "1" -- "0..*" SignsOfPigletsBeingCrushedDetectionMonitoringData : manages >
    SignsOfPigletsBeingCrushedDetectionController ..> AnimalsBehaviourMonitoringPublisher : uses >

    AnimalExteriorAuditController "1" -- "0..*" AnimalExteriorAuditMonitoringData : manages >
    AnimalExteriorAuditController ..> AnimalsBehaviourMonitoringPublisher : uses >

    CountAnimalsSystemController "1" -- "0..*" CountAnimalsSystemMonitoringData : manages >
    CountAnimalsSystemController ..> AnimalsBehaviourMonitoringPublisher : uses >
}
@enduml